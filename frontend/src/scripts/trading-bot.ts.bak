import { merkleTradingService } from '../services/merkle-trading.service';

// --- CONFIGURATION ---
// IMPORTANT: Securely manage these variables. Do not hardcode them in a production environment.
const GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'YOUR_GEMINI_API_KEY';
const TRADING_WALLET_PRIVATE_KEY = process.env.TRADING_WALLET_PRIVATE_KEY || 'YOUR_BOT_WALLET_PRIVATE_KEY';
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`;

const TRADING_PAIR = "APT_USDC";
const TRADE_SIZE_USD = 10; // Trade $10 USD worth of APT per trade
const POLLING_INTERVAL_MS = 30000; // Check for trading opportunities every 30 seconds

/**
 * Fetches a trading signal from the Gemini API.
 * @param marketData The current market data.
 * @returns A promise that resolves to 'LONG', 'SHORT', or 'HOLD'.
 */
async function getGeminiSignal(marketData: any): Promise<'LONG' | 'SHORT' | 'HOLD'> {
  const prompt = `
    You are an expert crypto day trader analyzing the APT-PERP market.
    Based on the following real-time data, decide if I should open a long position, open a short position, or do nothing (hold).
    Your answer must be a single word: LONG, SHORT, or HOLD.

    Current Market Data:
    - Price: $${marketData.price.toFixed(2)}
    - 24h Change: ${marketData.change24h.toFixed(2)}%
    - 24h Volume: ${marketData.volume24h.toFixed(2)}M
    - Funding Rate: ${marketData.funding.toFixed(4)}%
    - Open Interest: ${marketData.openInterest.toFixed(2)}M

    Your decision:
  `;

  try {
    const response = await fetch(GEMINI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{ parts: [{ text: prompt }] }],
      }),
    });

    if (!response.ok) {
      throw new Error(`Gemini API request failed with status ${response.status}`);
    }

    const data = await response.json();
    const signal = data.candidates[0].content.parts[0].text.trim().toUpperCase();

    if ([ 'LONG', 'SHORT', 'HOLD' ].includes(signal)) {
      return signal as 'LONG' | 'SHORT' | 'HOLD';
    }
    console.warn(`Received unexpected signal from Gemini: ${signal}`);
    return 'HOLD'; // Default to holding if the signal is unclear
  } catch (error) {
    console.error("Error fetching signal from Gemini:", error);
    return 'HOLD'; // Default to holding in case of an error
  }
}

/**
 * The main trading loop.
 */
async function tradingLoop() {
  console.log(`[${new Date().toLocaleTimeString()}] Checking for trading opportunities...`);

  try {
    // 1. Initialize the service
    await merkleTradingService.initialize(true); // true for testnet

    // 2. Fetch current market data
    const marketData = await merkleTradingService.getMarketData(TRADING_PAIR);
    if (!marketData) {
      console.log("Could not fetch market data. Skipping this loop.");
      return;
    }

    // 3. Get a signal from Gemini AI
    const signal = await getGeminiSignal(marketData);
    console.log(`  - Gemini Signal: ${signal}`);

    // 4. Act on the signal
    if (signal === 'LONG' || signal === 'SHORT') {
      console.log(`  - Executing ${signal} trade...`);
      
      // This is a simplified example. A real bot would need to manage wallet connections
      // and sign transactions using the TRADING_WALLET_PRIVATE_KEY.
      // The `placeOrder` function in the service needs to be adapted to work on the backend
      // without the frontend wallet adapter.

      // For now, we will just log the intended action.
      console.log(`  - INTENDED ACTION: Place ${signal} order for ${TRADE_SIZE_USD} USD of ${TRADING_PAIR}`);
      
      /*
      // Example of what the actual trade execution would look like:
      const leverage = 10;
      const size = TRADE_SIZE_USD / marketData.price;

      await merkleTradingService.placeOrder({
        pair: TRADING_PAIR,
        side: signal.toLowerCase() as 'long' | 'short',
        size: size,
        leverage: leverage,
        orderType: 'market',
      }, 'BOT_WALLET_ADDRESS'); // You need the bot's public wallet address here
      */

    } else {
      console.log("  - Holding position.");
    }

  } catch (error) {
    console.error("An error occurred in the trading loop:", error);
  }
}

/**
 * Starts the trading bot.
 */
function startBot() {
  console.log("AI Trading Bot started.");
  console.log("--- CAUTION ---");
  console.log("This is a demonstration bot. Automated trading is extremely risky and can lead to significant financial loss.");
  console.log("Ensure you are running on a testnet and using a wallet with no real funds.");
  console.log("---------------");

  // Run the loop immediately, then set an interval
  tradingLoop();
  setInterval(tradingLoop, POLLING_INTERVAL_MS);
}

// To run this file directly for testing: ts-node src/scripts/trading-bot.ts
// startBot();
